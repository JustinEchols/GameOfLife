typedef struct
{
	u32 base_color;
	s32 num_levels;
	u32 intensity_bits;
	u32 red_mask;
	u32 green_mask;
	u32 blue_mask;
} color_wu;

internal void
line_wu_draw(back_buffer *BackBuffer, v2f P1, v2f P2, color_wu *ColorWu)
{
	s32 x0 = f32_round_to_s32(P1.x);
	s32 y0 = f32_round_to_s32(P1.y);

	s32 x1 = f32_round_to_s32(P2.x);
	s32 y1 = f32_round_to_s32(P2.y);

	u32 base_color = ColorWu->base_color;

	if (y0 > y1) {
		s32 temp = x0;
		x0 = x1;
		x1 = temp;

		temp = y0;
		y0 = y1;
		y1 = temp;
	}
	pixel_set(BackBuffer, x0, y0, base_color);

	s32 dy = y1 - y0;
	s32 dx = x1 - x0;

	s32 x_dir;
	if (dx >= 0) {
		x_dir = 1;
	} else {
		x_dir = -1;
		dx = -dx;
	}

	if (dy == 0) {
		do {
			x0 += x_dir;
			pixel_set(BackBuffer, x0, y0, base_color);
		} while (--dx != 0);
		return;
	}

	if (dx == 0) {
		do {
			y0++;
			pixel_set(BackBuffer, x0, y0, base_color);
		} while (--dy != 0);
		return;
	}

	if (dy == dx) {
		do {
			x0 += x_dir;
			y0++;
			pixel_set(BackBuffer, x0, y0, base_color);
		} while (--dy != 0);
		return;
	}


	u32 error_accum = 0;
	u32 intensity_shift = 32 - ColorWu->intensity_bits;
	u32 weighting_comp_mask = ColorWu->num_levels - 1;

	u32 red_mask = ColorWu->red_mask;
	u32 green_mask = ColorWu->green_mask;
	u32 blue_mask = ColorWu->blue_mask;

	u32 error_adj, error_accum_temp, weighting;
	if (dy > dx) {
		error_adj = ((u64)dx << 32) / (u64)dy;
		while (--dy) {
			error_accum_temp = error_accum;
			error_accum += error_adj;
			if (error_accum <= error_accum_temp) {
				x0 += x_dir;
			}
			y0++;

			weighting = error_accum >> intensity_shift;

			u32 red = ((weighting & red_mask) << 16);
			u32 green = ((weighting & green_mask) << 8);
			u32 blue = weighting & blue_mask;
			u32 color = (red | green | blue);
			pixel_set(BackBuffer, x0 + x_dir, y0, color);

			red = (((weighting ^ weighting_comp_mask) & red_mask) << 16);
			green = (((weighting ^ weighting_comp_mask) & green_mask) << 8);
			blue = ((weighting ^ weighting_comp_mask) & blue_mask);
			u32 comp_color = (red | green | blue);
			pixel_set(BackBuffer, x0, y0, comp_color);
		}
		pixel_set(BackBuffer, x1, y1, base_color);
		return;
	}

	error_adj = ((u64)dy << 32) / (u64)dx;
	while (--dx) {
		error_accum_temp = error_accum;
		error_accum += error_adj;
		if (error_accum <= error_accum_temp) {
			y0++;
		}
		x0 += x_dir;

		weighting = error_accum >> intensity_shift;

		u32 red = ((weighting & red_mask) << 16);
		u32 green = ((weighting & green_mask) << 8);
		u32 blue = weighting & blue_mask;
		u32 color = (red | green | blue);
		pixel_set(BackBuffer, x0, y0 + 1, color);

		red = (((weighting ^ weighting_comp_mask) & red_mask) << 16);
		green = (((weighting ^ weighting_comp_mask) & green_mask) << 8);
		blue = ((weighting ^ weighting_comp_mask) & blue_mask);
		u32 comp_color = (red | green | blue);
		pixel_set(BackBuffer, x0, y0, comp_color);
	}
	pixel_set(BackBuffer, x1, y1, base_color);
}

